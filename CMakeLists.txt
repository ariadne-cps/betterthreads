cmake_minimum_required(VERSION 3.9)

project(BetterThreads VERSION 1.0)

option(COVERAGE "Enable coverage reporting" OFF)

if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 19.20)
        message(FATAL_ERROR "MSVC version must be at least 19.20!")
    endif()
elseif(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 10.2)
        message(FATAL_ERROR "GCC version must be at least 10.2!")
    endif()
elseif (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 11.0)
        message(FATAL_ERROR "Clang version must be at least 11.0!")
    endif()
else()
    message(WARNING "You are using an unsupported compiler! MSVC, GCC and Clang are supported.")
endif()

if(WIN32)
    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
    set(LIBRARY_KIND STATIC)
else()
    set(LIBRARY_KIND SHARED)	
endif()

set(CMAKE_MACOSX_RPATH 1)
set(BUILD_SHARED_LIBS ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(NOT WIN32)
    set(ANY_TARGET_WARN all extra pedantic sign-conversion cast-qual disabled-optimization
        init-self missing-include-dirs sign-promo switch-default undef redundant-decls
        strict-aliasing unused-parameter shadow error)
    foreach(WARN ${ANY_TARGET_WARN})
        add_compile_options(-W${WARN})
    endforeach()
else()
    add_compile_options(/WX)
endif()

include(CheckTypeSize)
check_type_size("size_t" SIZEOF_SIZET)
message(STATUS "size_t size: ${SIZEOF_SIZET}")
check_type_size("long int" SIZEOF_LONG_INT)
message(STATUS "long int size: ${SIZEOF_LONG_INT}")
check_type_size("long long int" SIZEOF_LONG_LONG_INT)
message(STATUS "long long int size: ${SIZEOF_LONG_LONG_INT}")

find_package(Git)
if(GIT_FOUND)
    if (NOT EXISTS ${PROJECT_SOURCE_DIR}/.git) # Manages the case when an archive is used
        execute_process(COMMAND git init WORKING_DIRECTORY ${PROJECT_SOURCE_DIR} OUTPUT_QUIET ERROR_QUIET)
        execute_process(COMMAND rm -Rf ${PROJECT_SOURCE_DIR}/submodules/conclog OUTPUT_QUIET ERROR_QUIET)
        execute_process(COMMAND git submodule add -f https://github.com/ariadne-cps/conclog submodules/conclog WORKING_DIRECTORY ${PROJECT_SOURCE_DIR} OUTPUT_QUIET ERROR_QUIET)
    endif()
    message(STATUS "Getting all submodules if not downloaded already...")
    execute_process(COMMAND git submodule update --init --recursive WORKING_DIRECTORY ${PROJECT_SOURCE_DIR} OUTPUT_QUIET ERROR_QUIET)
    if(NOT EXISTS ${PROJECT_SOURCE_DIR}/submodules/conclog/CMakeLists.txt)
        message(ERROR "ConcLog download failure")
    else()
        message(STATUS "ConcLog submodule found")
    endif()
else()
    message(FATAL_ERROR "Git not found, no submodules could be downloaded")
endif()

if (NOT EXISTS ${PROJECT_SOURCE_DIR}/submodules/.symbolic)
    execute_process(COMMAND mkdir ${PROJECT_SOURCE_DIR}/submodules/.symbolic)
    message(STATUS "Created symbolic links directory for submodules")
endif()

if (NOT EXISTS ${PROJECT_SOURCE_DIR}/submodules/.symbolic/conclog)
    execute_process(COMMAND ln -s ${PROJECT_SOURCE_DIR}/submodules/conclog/include ${PROJECT_SOURCE_DIR}/submodules/.symbolic/conclog)
    message(STATUS "Created symbolic link to ConcLog submodule")
endif()

find_package(Threads REQUIRED)

include_directories(SYSTEM ${PROJECT_SOURCE_DIR}/include ${PROJECT_SOURCE_DIR}/submodules/.symbolic)

if(NOT TARGET betterthreads)
    add_subdirectory(src)

    add_library(betterthreads ${LIBRARY_KIND} $<TARGET_OBJECTS:BETTERTHREADS_SRC>)

    if(NOT TARGET coverage_config)
        add_library(coverage_config INTERFACE)
    endif()

    if(NOT TARGET tests)
        if(COVERAGE)
            message(STATUS "Enabled coverage reporting")
            target_compile_options(coverage_config INTERFACE -O0 -g --coverage)
            if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.13)
                target_link_options(coverage_config INTERFACE --coverage)
            else()
                target_link_libraries(coverage_config INTERFACE --coverage)
            endif()
            target_link_libraries(betterthreads coverage_config)
        endif()

        enable_testing()
        add_subdirectory(test)
    endif()

    add_subdirectory(submodules)
    target_link_libraries(betterthreads conclog ${CMAKE_THREAD_LIBS_INIT})

endif()
